// Code generated by kraftkit.sh/tools/go-generate-qemu-devices.  DO NOT EDIT.
package qemu

import (
	"encoding/json"
	"fmt"
	"strconv"
	"strings"
)

type QemuDeviceType string

type QemuDevice interface {
	fmt.Stringer
}

type QemuDeviceOptOnOffAuto string

const (
	QemuDeviceOptOn   = QemuDeviceOptOnOffAuto("on")
	QemuDeviceOptOff  = QemuDeviceOptOnOffAuto("off")
	QemuDeviceOptAuto = QemuDeviceOptOnOffAuto("auto")

	{{ range $category, $devices := .Devices }}
	// {{ $category -}}
	{{ range $devices }}
	QemuDeviceType{{ .Name | camelcase }} = QemuDeviceType("{{ .Name }}"){{ if ne .Comment "" }} // {{ .Comment }}{{ end }}
	{{- end }}
	{{ end }}
)

{{- range $category, $devices := .Devices }}
{{ range $devices }}
type QemuDevice{{ .Name | camelcase }} struct {
{{- range $option := .Options }}
	{{
		if and (eq .Type "bool") (eq .Default "true") 
	-}}
	No{{ .Name | camelcase }} {{ .Type }} `json:"-"`
	{{ .Name | camelcase | trunc 1 | lower }}{{ .Name | camelcase | substr 1 -1 }} {{ .Type -}}
	{{ else }}{{ if .FirstCharIsNumber }}_{{ end }}{{
	.Name | camelcase }} {{ .Type }}{{ end 
		}} `json_name:"{{ .Name }},omitempty"{{
				if ne .Default ""
					}} default:"{{ .Default }}"{{ 
				end
			}}`{{ if ne .Comment "" }} // {{ .Comment }}{{ end }}
{{- end }}
}

{{- $hasInverseBoolOpt := false -}}
{{- range $option := .Options -}}
{{- if and (eq .Type "bool") (eq .Default "true") -}}
{{- $hasInverseBoolOpt = true -}}
{{- end -}}
{{- end -}}
{{- if $hasInverseBoolOpt }}

func (d QemuDevice{{ .Name | camelcase }}) MarshalJSON() ([]byte, error) {
	copy := d
	{{ range $option := .Options }}
	{{- if and (eq .Type "bool") (eq .Default "true") }}
	if d.No{{ .Name | camelcase }} {
		copy.{{ .Name | camelcase | trunc 1 | lower }}{{ .Name | camelcase | substr 1 -1 }} = false
	} else {
		copy.{{ .Name | camelcase | trunc 1 | lower }}{{ .Name | camelcase | substr 1 -1 }} = true
	}
	{{- end }}
	{{- end }}

	return json.Marshal(copy)
}
{{- end }}

// String returns a QEMU command-line compatible chardev string with the format:
// {{ .Name }}
func (d QemuDevice{{ .Name | camelcase }}) String() string {
	var ret strings.Builder

	ret.WriteString(string(QemuDeviceType{{ .Name | camelcase }}))

	{{- range $option := .Options }}
	{{- if eq .Type "string" }}
	if len(d.{{ .Name | camelcase }}) > 0 {
		ret.WriteString(",{{ .Name }}=")
		ret.WriteString(d.{{ .Name | camelcase }})
	}
	{{- else if and (eq .Type "bool") (eq .Default "false") }}
	if d.{{ if .FirstCharIsNumber }}_{{ end }}{{ .Name | camelcase }} {
		ret.WriteString(",{{ .Name }}=on")
	}
	{{- else if and (eq .Type "bool") (eq .Default "true") }}
	if d.No{{ .Name | camelcase }} {
		ret.WriteString(",{{ .Name }}=off")
	}
	{{- else if and (eq .Type "bool") }}
	if d.{{ if .FirstCharIsNumber }}_{{ end }}{{ .Name | camelcase }} {
		ret.WriteString(",{{ .Name }}=on")
	}
	{{- else if and (eq (.Type | trunc 4 | lower) "uint") (ne .Default "") }}
	if d.{{ if .FirstCharIsNumber }}_{{ end }}{{ .Name | camelcase }} != {{ .Default }} && d.{{ .Name | camelcase }} > 0 {
		ret.WriteString(",{{ .Name }}=")
		ret.WriteString(strconv.FormatUint(uint64(d.{{ .Name | camelcase }}), 10))
	}
	{{- else if eq (.Type | trunc 4 | lower) "uint" }}
	if d.{{ if .FirstCharIsNumber }}_{{ end }}{{ .Name | camelcase }} != 0 {
		ret.WriteString(",{{ .Name }}=")
		ret.WriteString(strconv.FormatUint(uint64(d.{{ .Name | camelcase }}), 10))
	}
	{{- else if eq .Type "int" }}
	if d.{{ if .FirstCharIsNumber }}_{{ end }}{{ .Name | camelcase }} != 0 {
		ret.WriteString(",{{ .Name }}=")
		ret.WriteString(strconv.Itoa(d.{{ .Name | camelcase }}))
	}
	{{- else }}
	if len(string(d.{{ if .FirstCharIsNumber }}_{{ end }}{{ .Name | camelcase }})) > 0 {
		ret.WriteString(",{{ .Name }}=")
		ret.WriteString(string(d.{{ .Name | camelcase }}))
	}
	{{- end }}
	{{- end }}

	return ret.String()
}
{{ end }}
{{ end }}
